<body onmouseup="mouseup()" onselectstart="return false">

  <div class="alert alert-info" id="gameover"role="alert" style="display:none;margin-top:2px;">
    <button type="button" class="close" data-dismiss="alert" aria-label="Close">
      <span aria-hidden="true">&times;</span>
    </button>
    <strong>The World Perish!!! </strong>  No new life, or a endless loop.
  </div>

  <div class="card" id="lifeDiv" style='width:700px; margin:0 auto;margin-top:2px;'>
    <div class="card-header" id="lifeinfo">Alive: 0&emsp;&emsp;Generation: 0</div>
    <canvas id="lifeGrid" onmousemove="setlives(event)" onmousedown="mouseon(event)" style='border:1px solid;border-radius:2px;color:Black;'><p>Your browser does not support the canvas element</p></canvas>
    
    <div id="randomdiv"class="btn-group" role="group" aria-label="Basic example" style='width: 100%'>
    <button type="button" class="btn btn-outline-secondary" onclick="minus5()">-0.05</button>
    <button id="random" type="button" class="btn btn-outline-info" onclick="random()"style='width: 100%'>Random Soup 0%</button>
    <button type="button" class="btn btn-outline-secondary" onclick="plus5()">+0.05</button>
    </div>
   
    <button id="start" type="button" class="btn btn-info btn-lg btn-block" onclick="Start()">START</button>
  </div>

</body>

<script>
const speed=50,//ms
      lifesize=5,//lifesize of pixel
      lifeColor='LightSeaGreen',
      mapColor='WhiteSmoke';
var canvas,context,lives,lives2nd,cols,rows,div;
var gamestarted=0,mouse=0,gene=0,lastgene50=-1, soup=0;//flag
var slider;
window.onload = init;

function init(){
  
  canvas = document.getElementById("lifeGrid");
  div = document.getElementById("lifeDiv");

  if(screen.width<500){
    div.style.cssText = "width:400px; margin:0 auto;margin-top:1px;";
    canvas.setAttribute("width", 400);
    canvas.setAttribute("height", 400);
    
  } else{
    canvas.setAttribute("width", div.style.width);
    canvas.setAttribute("height", div.style.width);
  }
  context = canvas.getContext("2d");
  rows=context.canvas.height/lifesize;
  cols=context.canvas.width/lifesize;
  lives=new Array(rows * cols);
  lives2nd=new Array(rows * cols);
  drawGrid();
  for(var i=0;i<lives.length;i++)
    lives[i]=0;
}

function plus5(){
  soup+=0.05;
  if(soup>1) soup=1;
  document.getElementById("random").innerHTML="Random Soup "+Math.round(soup*100)+"%";
}

function minus5(){
  soup-=0.05;
  if(soup<0) soup=0;
  document.getElementById("random").innerHTML="Random Soup "+Math.round(soup*100)+"%";
}

function random(){
  for(var i=0;i<lives.length;i++)
    lives[i]=0;
  for(var i=0;i<lives.length;i++){
    if(Math.random()<soup)
      lives[i]=1;
    else
      lives[i]=0;
  }
  context.clearRect(0, 0, context.canvas.width, context.canvas.height);
  drawGrid();
  drawlife();
  
}

function mouseon(evt){
  mouse=1;
  setlives(evt);
}
function mouseup(){
  mouse=0;
}
function setlives(evt){
  if(gamestarted==0 && mouse==1){
     function getMousePos(canvas, evt) {
        var rect = canvas.getBoundingClientRect();
        var canvasX=Math.floor((evt.clientX - rect.left)/lifesize);
        if(canvasX>=cols) canvasX=cols-1;
        return {
            x: canvasX,
            y: Math.floor((evt.clientY - rect.top)/lifesize)
          };
      }
      var mousePos = getMousePos(canvas, evt);
      lives[mousePos.y*cols+mousePos.x]=1;
      drawlife();
  }
}

function Start(){
  if(gamestarted==0){
    document.getElementById("random").disabled = true;
    for(var i=0;i<lives.length;i++){
      if(lives[i]==1) lives2nd[i]=0;
      else lives2nd[i]=1;
    }
    gamestarted=1;
    drawlife();
    timelp=setInterval(updatelife, speed);
  }
}

function updatelife(){
  context.clearRect(0, 0, context.canvas.width, context.canvas.height);
  drawGrid();
  drawlife();

  gene+=1;
  var templive=new Array(lives.length);
  for(var i = 0; i<lives.length; i += 1)
    templive[i]=lives[i];
  for(var y2=0;y2<rows;y2+=1){
      for(var x2=0;x2<cols;x2+=1){
        var lifeCount=0;
        if(y2-1>=0&&x2-1>=0 && templive[(y2-1)*cols+x2-1]>0)lifeCount++;
        if(y2-1>=0 && templive[(y2-1)*cols+x2]>0)lifeCount++;
        if(y2-1>=0&&x2+1<cols && templive[(y2-1)*cols+x2+1]>0)lifeCount++;
        if(x2+1<cols&&templive[y2*cols+x2+1]>0)lifeCount++;
        if(y2+1<rows&&x2+1<cols&&templive[(y2+1)*cols+x2+1]>0)lifeCount++;
        if(y2+1<rows&&templive[(y2+1)*cols+x2]>0)lifeCount++;
        if(y2+1<rows&&x2-1>=0&&templive[(y2+1)*cols+x2-1]>0)lifeCount++;
        if(x2-1>=0&&templive[y2*cols+x2-1]>0)lifeCount++;

        if((lifeCount<2||lifeCount>3)&&templive[y2*cols+x2]>0)lives[y2*cols+x2]=0;
        if(lifeCount==3&&templive[y2*cols+x2]==0)lives[y2*cols+x2]=1;
        }
  }

  var diffgene=0;
  for(var i = 0; i<lives.length; i += 1)
    if(lives2nd[i]!=lives[i])
      diffgene+=1;
  if(diffgene==0&&lastgene50==-1){
    lastgene50=50;
    $("#gameover").show();
  }
  for(var i = 0; i<lives.length; i += 1)
    lives2nd[i]=templive[i];
  if(lastgene50>0)
    lastgene50-=1;
}

function drawGrid(){
  context.lineWidth = 1;
  context.strokeStyle = mapColor;
  for(var i = lifesize+0.5; i < context.canvas.height; i += lifesize){
      context.beginPath();
      context.moveTo(0, i);
      context.lineTo(context.canvas.width, i);
      context.stroke();
  }
  for(var i = lifesize+0.5; i < context.canvas.width; i += lifesize){
      context.beginPath();
      context.moveTo(i, 0);
      context.lineTo(i, context.canvas.height);
      context.stroke();
  }
}
function drawlife(){
  var alive=0;
  context.fillStyle = lifeColor;
  for(var y=0;y<rows;y++){
      for(var x=0;x<cols;x++){
          if(lives[y*cols+x]==1){
              alive+=1;
              context.fillRect(x*lifesize+1,y*lifesize+1,lifesize-1,lifesize-1);
          }
      }
  }
  document.getElementById("lifeinfo").innerHTML="Alive: "+alive+"&emsp;&emsp;Generation: "+gene;
  if(lastgene50==0){
     clearInterval(timelp);
     document.getElementById("start").innerHTML="RESTART";
     document.getElementById("start").onclick=function(){window.location.reload();}
  }
}
</script>
